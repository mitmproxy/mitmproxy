#!/usr/bin/env python

# Copyright (C) 2010  Aldo Cortesi
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from libmproxy import proxy, dump, cmdline
from libmproxy.version import VERSION
from optparse import OptionParser


if __name__ == '__main__':
    parser = OptionParser(
                usage = "%prog [options] [filter]",
                version="%%prog %s"%VERSION,
            )
    cmdline.common_options(parser)
    parser.add_option(
        "--keepserving",
        action="store_true", dest="keepserving", default=False,
        help="Continue serving after client playback or file read. We exit by default."
    )

    options, args = parser.parse_args()

    if options.quiet:
        options.verbose = 0

    config = proxy.process_certificate_option_group(parser, options)
    if options.no_server:
        server = None
    else:
        try:
            server = proxy.ProxyServer(config, options.port, options.addr)
        except proxy.ProxyServerError, v:
            print >> sys.stderr, "mitmdump:", v.args[0]
            sys.exit(1)


    dumpopts = dump.Options(**cmdline.get_common_options(options))
    dumpopts.keepserving = options.keepserving

    if args:
        filt = " ".join(args)
    else:
        filt = None

    try:
        m = dump.DumpMaster(server, dumpopts, filt)
        m.run()
    except dump.DumpError, e:
        print >> sys.stderr, "mitmdump:", e
        sys.exit(1)
    except KeyboardInterrupt:
        pass
