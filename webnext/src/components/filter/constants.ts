import type { FilterCategoriesRecord, FilterDefinitionsRecord } from "./types";
import {
  LuGlobe,
  LuServer,
  LuCode,
  LuFileText,
  LuImage,
  LuClock,
  LuCircle,
  LuCheck,
  LuX,
  LuHash,
  LuMessageSquare,
  LuNetwork,
  LuZap,
  LuEye,
  LuPlay,
  LuPause,
  LuRotateCcw,
  LuSettings,
  LuLink,
  LuSmartphone,
  LuWifi,
} from "react-icons/lu";

export const FILTER_CATEGORIES: FilterCategoriesRecord = {
  "Flow Types": {
    icon: LuNetwork,
    color: "bg-info/10 border-info/20 text-info-foreground",
    filters: ["all", "http", "dns", "tcp", "udp", "websocket"],
  },
  "Content & Assets": {
    icon: LuFileText,
    color: "bg-success/10 border-success/20 text-success-foreground",
    filters: [
      "asset",
      "body",
      "requestBody",
      "responseBody",
      "contentType",
      "requestContentType",
      "responseContentType",
    ],
  },
  "Network & Headers": {
    icon: LuGlobe,
    color: "bg-chart-1/10 border-chart-1/20 text-foreground",
    filters: [
      "domain",
      "url",
      "header",
      "requestHeader",
      "responseHeader",
      "destination",
      "source",
    ],
  },
  "Status & Errors": {
    icon: LuCircle,
    color:
      "bg-destructive/10 border-destructive/20 text-destructive-foreground",
    filters: ["responseCode", "error", "response", "noResponse"],
  },
  "Methods & Actions": {
    icon: LuZap,
    color: "bg-warning/10 border-warning/20 text-warning-foreground",
    filters: ["method", "replay", "clientReplay", "serverReplay"],
  },
  Annotations: {
    icon: LuMessageSquare,
    color: "bg-chart-2/10 border-chart-2/20 text-foreground",
    filters: ["comment", "marked", "marker"],
  },
  Other: {
    icon: LuSettings,
    color: "bg-muted border-border text-muted-foreground",
    filters: ["bareString"],
  },
};

export const FILTER_DEFINITIONS: FilterDefinitionsRecord = {
  all: {
    label: "All Flows",
    hasValue: false,
    symbol: "~all",
    icon: LuCheck,
    description: "Match all network flows",
  },
  asset: {
    label: "Assets",
    hasValue: false,
    symbol: "~a",
    icon: LuImage,
    description: "Static assets (JS, CSS, images, fonts)",
  },
  body: {
    label: "Body Content",
    hasValue: true,
    symbol: "~b",
    icon: LuFileText,
    description: "Request or response body contains text",
  },
  requestBody: {
    label: "Request Body",
    hasValue: true,
    symbol: "~bq",
    icon: LuFileText,
    description: "Request body contains text",
  },
  responseBody: {
    label: "Response Body",
    hasValue: true,
    symbol: "~bs",
    icon: LuFileText,
    description: "Response body contains text",
  },
  responseCode: {
    label: "Response Code",
    hasValue: true,
    symbol: "~c",
    icon: LuHash,
    description: "HTTP response status code",
  },
  comment: {
    label: "Comment",
    hasValue: true,
    symbol: "~comment",
    icon: LuMessageSquare,
    description: "Flow comment matches text",
  },
  domain: {
    label: "Domain",
    hasValue: true,
    symbol: "~d",
    icon: LuGlobe,
    description: "Domain name matches pattern",
  },
  dns: {
    label: "DNS Flow",
    hasValue: false,
    symbol: "~dns",
    icon: LuNetwork,
    description: "DNS query/response flows",
  },
  destination: {
    label: "Destination",
    hasValue: true,
    symbol: "~dst",
    icon: LuServer,
    description: "Destination IP:port matches",
  },
  error: {
    label: "Has Error",
    hasValue: false,
    symbol: "~e",
    icon: LuX,
    description: "Flow has an error",
  },
  header: {
    label: "Any Header",
    hasValue: true,
    symbol: "~h",
    icon: LuCode,
    description: "Any header matches pattern",
  },
  requestHeader: {
    label: "Request Header",
    hasValue: true,
    symbol: "~hq",
    icon: LuCode,
    description: "Request header matches pattern",
  },
  responseHeader: {
    label: "Response Header",
    hasValue: true,
    symbol: "~hs",
    icon: LuCode,
    description: "Response header matches pattern",
  },
  http: {
    label: "HTTP Flow",
    hasValue: false,
    symbol: "~http",
    icon: LuGlobe,
    description: "HTTP request/response flows",
  },
  marked: {
    label: "Is Marked",
    hasValue: false,
    symbol: "~marked",
    icon: LuEye,
    description: "Flow is marked/highlighted",
  },
  marker: {
    label: "Marker Text",
    hasValue: true,
    symbol: "~marker",
    icon: LuEye,
    description: "Marker text matches pattern",
  },
  method: {
    label: "HTTP Method",
    hasValue: true,
    symbol: "~m",
    icon: LuZap,
    description: "HTTP method (GET, POST, etc.)",
  },
  noResponse: {
    label: "No Response",
    hasValue: false,
    symbol: "~q",
    icon: LuClock,
    description: "Request without response",
  },
  clientReplay: {
    label: "Client Replay",
    hasValue: false,
    symbol: "~replayq",
    icon: LuPlay,
    description: "Request has been replayed",
  },
  serverReplay: {
    label: "Server Replay",
    hasValue: false,
    symbol: "~replays",
    icon: LuPause,
    description: "Response has been replayed",
  },
  replay: {
    label: "Any Replay",
    hasValue: false,
    symbol: "~replay",
    icon: LuRotateCcw,
    description: "Flow has been replayed",
  },
  source: {
    label: "Source",
    hasValue: true,
    symbol: "~src",
    icon: LuSmartphone,
    description: "Source IP:port matches",
  },
  response: {
    label: "Has Response",
    hasValue: false,
    symbol: "~s",
    icon: LuCheck,
    description: "Request has a response",
  },
  tcp: {
    label: "TCP Flow",
    hasValue: false,
    symbol: "~tcp",
    icon: LuNetwork,
    description: "TCP connection flows",
  },
  udp: {
    label: "UDP Flow",
    hasValue: false,
    symbol: "~udp",
    icon: LuWifi,
    description: "UDP packet flows",
  },
  requestContentType: {
    label: "Request Content-Type",
    hasValue: true,
    symbol: "~tq",
    icon: LuFileText,
    description: "Request content type matches",
  },
  responseContentType: {
    label: "Response Content-Type",
    hasValue: true,
    symbol: "~ts",
    icon: LuFileText,
    description: "Response content type matches",
  },
  contentType: {
    label: "Any Content-Type",
    hasValue: true,
    symbol: "~t",
    icon: LuFileText,
    description: "Any content type matches",
  },
  url: {
    label: "URL Pattern",
    hasValue: true,
    symbol: "~u",
    icon: LuLink,
    description: "URL matches pattern",
  },
  websocket: {
    label: "WebSocket",
    hasValue: false,
    symbol: "~websocket",
    icon: LuZap,
    description: "WebSocket flows",
  },
  bareString: {
    label: "URL (bare)",
    hasValue: true,
    symbol: "",
    icon: LuLink,
    description: "Bare string for URL matching",
  },
};
