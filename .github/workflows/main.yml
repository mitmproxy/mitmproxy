name: CI

on: [push, pull_request]

env:
  CI_BUILD_KEY: ${{ secrets.CI_BUILD_KEY }}

jobs:
  lint-pr:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: TrueBrain/actions-flake8@v1.2
  lint-local:
    # do not use external action when secrets are exposed.
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v1
      - uses: actions/checkout@v1
      - run: |
          python -m pip install --upgrade pip
          pip install flake8
      - run: flake8 mitmproxy pathod examples test release
  mypy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v1
      - uses: actions/checkout@v1
      - run: |
          python -m pip install --upgrade pip
          pip install mypy
      - run: mypy .
  test:
    strategy:
      fail-fast: false  # FIXME
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - if: matrix.os != 'windows-latest'
        uses: actions/setup-python@v1
      - if: matrix.os == 'windows-latest'
        uses: actions/setup-python@v1
        with:
          python-version: '3.7'
          architecture: 'x86'  # FIXME: cryptography update
      - uses: actions/checkout@v1
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - run: mitmdump --version
      - name: Test with pytest
        run: |
          pytest --timeout 60 --cov-report=xml --cov=mitmproxy --cov=pathod --full-cov=mitmproxy/ --full-cov=pathod/
      - run: |
          pip install codecov
          codecov
        env:
          VCS_PULL_REQUEST: ${{ github.event.number }}
          VCS_SLUG: ${{ github.repository }}
  build-wheel-and-docker:
    runs-on: ubuntu-latest
    env:
      CI_BUILD_WHEEL: 1
      CI_BUILD_DOCKER: 1
    steps:
      - run: printenv
      - uses: actions/setup-python@v1
      - uses: actions/checkout@v1
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox
      - run: tox -e cibuild -- build
  build-binaries:
    strategy:
      fail-fast: false  # FIXME
      matrix:
        # Old Ubuntu version for old glibc
        os: [macos-latest, windows-latest, ubuntu-16.04]
    runs-on: ${{ matrix.os }}
    env:
      CI_BUILD_PYINSTALLER: 1
      CI_BUILD_WININSTALLER: ${{ (matrix.os == "windows-latest") || '' }}
    steps:
      - if: "!startsWith(runner.os, 'Windows')"
        uses: actions/setup-python@v1
      - if: startsWith(runner.os, 'Windows')
        uses: actions/setup-python@v1
        with:
          python-version: '3.7'
          architecture: 'x86'  # FIXME: cryptography update
      - uses: actions/checkout@v1
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - run: |
          printenv
          tox -e cibuild -- build
      - uses: actions/upload-artifact@master
        with:
          name: binaries
          path: release/dist

  deploy:
    runs-on: ubuntu-latest
    if: github.repository == 'mitmproxy/mitmproxy' && github.event_name == 'push'
    needs: [build-wheel-and-docker, build-binaries]
    steps:
      - uses: actions/setup-python@v1
      - uses: actions/checkout@v1
      - uses: actions/download-artifact@master
        with:
          name: binaries
          path: release/dist
      - run: ls release/dist
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - run: tox -e cibuild -- upload
